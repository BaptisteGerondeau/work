From 0576232be2180670ae18e3c2f20d0721162938fc Mon Sep 17 00:00:00 2001
From: Rafael David Tinoco <rafael.tinoco@linaro.org>
Date: Wed, 25 Jul 2018 17:19:33 -0300
Subject: [PATCH 1/2] syscalls/fsetxattr: Add fsetxattr() tests based on
 setxattr() ones

Fixes: #274

Following the same logic and tests used to test setxattr() syscalls,
this commit implements tests for fsetxattr(). It only differs from
setxattr() on the given arguments: using a file descriptor instead of
the filename.

Kernel has different entry points for both, with slightly different
execution paths, mainly related to dealing with the passed file
descriptor. Minor changes were made in order for the file descriptors to
be available for the fsetxattr() call.

Signed-off-by: Rafael David Tinoco <rafael.tinoco@linaro.org>
---
 runtest/syscalls                              |   3 +
 .../kernel/syscalls/fsetxattr/.gitignore      |   2 +
 testcases/kernel/syscalls/fsetxattr/Makefile  |   8 +
 .../kernel/syscalls/fsetxattr/fsetxattr01.c   | 207 ++++++++++++++++
 .../kernel/syscalls/fsetxattr/fsetxattr02.c   | 234 ++++++++++++++++++
 5 files changed, 454 insertions(+)
 create mode 100644 testcases/kernel/syscalls/fsetxattr/.gitignore
 create mode 100644 testcases/kernel/syscalls/fsetxattr/Makefile
 create mode 100644 testcases/kernel/syscalls/fsetxattr/fsetxattr01.c
 create mode 100644 testcases/kernel/syscalls/fsetxattr/fsetxattr02.c

diff --git a/runtest/syscalls b/runtest/syscalls
index dc72484cb..df5699a0a 100644
--- a/runtest/syscalls
+++ b/runtest/syscalls
@@ -307,6 +307,9 @@ fork14 fork14
 
 fpathconf01 fpathconf01
 
+fsetxattr01 fsetxattr01
+fsetxattr02 fsetxattr02
+
 fstat01 fstat01
 fstat01_64 fstat01_64
 fstat02 fstat02
diff --git a/testcases/kernel/syscalls/fsetxattr/.gitignore b/testcases/kernel/syscalls/fsetxattr/.gitignore
new file mode 100644
index 000000000..8e7a9f236
--- /dev/null
+++ b/testcases/kernel/syscalls/fsetxattr/.gitignore
@@ -0,0 +1,2 @@
+/fsetxattr01
+/fsetxattr02
diff --git a/testcases/kernel/syscalls/fsetxattr/Makefile b/testcases/kernel/syscalls/fsetxattr/Makefile
new file mode 100644
index 000000000..f71e4fc25
--- /dev/null
+++ b/testcases/kernel/syscalls/fsetxattr/Makefile
@@ -0,0 +1,8 @@
+# Copyright (c) 2018 - Linaro Limited. All rights reserved.
+# SPDX-License-Identifier: GPL-2.0-or-later
+
+top_srcdir		?= ../../../..
+
+include $(top_srcdir)/include/mk/testcases.mk
+
+include $(top_srcdir)/include/mk/generic_leaf_target.mk
\ No newline at end of file
diff --git a/testcases/kernel/syscalls/fsetxattr/fsetxattr01.c b/testcases/kernel/syscalls/fsetxattr/fsetxattr01.c
new file mode 100644
index 000000000..5338e1f18
--- /dev/null
+++ b/testcases/kernel/syscalls/fsetxattr/fsetxattr01.c
@@ -0,0 +1,207 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * Copyright (c) 2018 Linaro Limited. All rights reserved.
+ * Author: Rafael David Tinoco <rafael.tinoco@linaro.org>
+ */
+
+/*
+ * Basic tests for fsetxattr(2) and make sure fsetxattr(2) handles error
+ * conditions correctly.
+ *
+ * There are 9 test cases:
+ * 1. Any other flags being set except XATTR_CREATE and XATTR_REPLACE,
+ *    fsetxattr(2) should return -1 and set errno to EINVAL
+ * 2. With XATTR_REPLACE flag set but the attribute does not exist,
+ *    fsetxattr(2) should return -1 and set errno to ENODATA
+ * 3. Create new attr with name length greater than XATTR_NAME_MAX(255)
+ *    fsetxattr(2) should return -1 and set errno to ERANGE
+ * 4. Create new attr whose value length is greater than XATTR_SIZE_MAX(65536)
+ *    fsetxattr(2) should return -1 and set errno to E2BIG
+ * 5. Create new attr whose value length is zero,
+ *    fsetxattr(2) should succeed
+ * 6. Replace the attr value without XATTR_REPLACE flag being set,
+ *    fsetxattr(2) should return -1 and set errno to EEXIST
+ * 7. Replace attr value with XATTR_REPLACE flag being set,
+ *    fsetxattr(2) should succeed
+ * 8. Create new attr whose key length is zero,
+ *    fsetxattr(2) should return -1 and set errno to ERANGE
+ * 9. Create new attr whose key is NULL,
+ *    fsetxattr(2) should return -1 and set errno to EFAULT
+ */
+
+#include "config.h"
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/wait.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <signal.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#ifdef HAVE_SYS_XATTR_H
+# include <sys/xattr.h>
+#endif
+#include "tst_test.h"
+
+#ifdef HAVE_SYS_XATTR_H
+#define XATTR_NAME_MAX 255
+#define XATTR_NAME_LEN (XATTR_NAME_MAX + 2)
+#define XATTR_SIZE_MAX 65536
+#define XATTR_TEST_KEY "user.testkey"
+#define XATTR_TEST_VALUE "this is a test value"
+#define XATTR_TEST_VALUE_SIZE 20
+#define MNTPOINT "mntpoint"
+#define FNAME MNTPOINT"/fsetxattr01testfile"
+
+static int fd = -1;
+static char long_key[XATTR_NAME_LEN];
+static char *long_value;
+static char *xattr_value = XATTR_TEST_VALUE;
+
+struct test_case {
+	char *key;
+	char **value;
+	size_t size;
+	int flags;
+	int exp_err;
+};
+struct test_case tc[] = {
+	{			/* case 00, invalid flags */
+	 .key = long_key,
+	 .value = &xattr_value,
+	 .size = XATTR_TEST_VALUE_SIZE,
+	 .flags = ~0,
+	 .exp_err = EINVAL,
+	 },
+	{			/* case 01, replace non-existing attribute */
+	 .key = XATTR_TEST_KEY,
+	 .value = &xattr_value,
+	 .size = XATTR_TEST_VALUE_SIZE,
+	 .flags = XATTR_REPLACE,
+	 .exp_err = ENODATA,
+	 },
+	{			/* case 02, long key name */
+	 .key = long_key,
+	 .value = &xattr_value,
+	 .size = XATTR_TEST_VALUE_SIZE,
+	 .flags = XATTR_CREATE,
+	 .exp_err = ERANGE,
+	 },
+	{			/* case 03, long value */
+	 .key = XATTR_TEST_KEY,
+	 .value = &long_value,
+	 .size = XATTR_SIZE_MAX + 1,
+	 .flags = XATTR_CREATE,
+	 .exp_err = E2BIG,
+	 },
+	{			/* case 04, zero length value */
+	 .key = XATTR_TEST_KEY,
+	 .value = &xattr_value,
+	 .size = 0,
+	 .flags = XATTR_CREATE,
+	 .exp_err = 0,
+	 },
+	{			/* case 05, create existing attribute */
+	 .key = XATTR_TEST_KEY,
+	 .value = &xattr_value,
+	 .size = XATTR_TEST_VALUE_SIZE,
+	 .flags = XATTR_CREATE,
+	 .exp_err = EEXIST,
+	 },
+	{			/* case 06, replace existing attribute */
+	 .key = XATTR_TEST_KEY,
+	 .value = &xattr_value,
+	 .size = XATTR_TEST_VALUE_SIZE,
+	 .flags = XATTR_REPLACE,
+	 .exp_err = 0,
+	},
+	{			/* case 07, zero length key */
+	 .key = "",
+	 .value = &xattr_value,
+	 .size = XATTR_TEST_VALUE_SIZE,
+	 .flags = XATTR_CREATE,
+	 .exp_err = ERANGE,
+	},
+	{			/* case 08, NULL key */
+	 .value = &xattr_value,
+	 .size = XATTR_TEST_VALUE_SIZE,
+	 .flags = XATTR_CREATE,
+	 .exp_err = EFAULT,
+	},
+};
+
+static void verify_fsetxattr(unsigned int i)
+{
+	TEST(fsetxattr(fd, tc[i].key, *tc[i].value, tc[i].size, tc[i].flags));
+
+	if (TST_RET == -1 && TST_ERR == EOPNOTSUPP)
+		tst_brk(TCONF, "fsetxattr() not supported");
+
+	if (!tc[i].exp_err) {
+		if (TST_RET) {
+			tst_res(TFAIL | TTERRNO,
+				"fsetxattr() failed with %li", TST_RET);
+			return;
+		}
+
+		tst_res(TPASS, "fsetxattr() passed");
+		return;
+	}
+
+	if (TST_RET == 0) {
+		tst_res(TFAIL, "fsetxattr() passed unexpectedly");
+		return;
+	}
+
+	if (tc[i].exp_err != TST_ERR) {
+		tst_res(TFAIL | TTERRNO, "fsetxattr() should fail with %s",
+			tst_strerrno(tc[i].exp_err));
+		return;
+	}
+
+	tst_res(TPASS | TTERRNO, "fsetxattr() failed");
+}
+
+static void cleanup(void)
+{
+	if (fd > 0)
+		SAFE_CLOSE(fd);
+}
+
+static void setup(void)
+{
+	size_t i = 0;
+
+	snprintf(long_key, 6, "%s", "user.");
+	memset(long_key + 5, 'k', XATTR_NAME_LEN - 5);
+	long_key[XATTR_NAME_LEN - 1] = '\0';
+
+	long_value = SAFE_MALLOC(XATTR_SIZE_MAX + 2);
+	memset(long_value, 'v', XATTR_SIZE_MAX + 2);
+	long_value[XATTR_SIZE_MAX + 1] = '\0';
+
+	SAFE_TOUCH(FNAME, 0644, NULL);
+	fd = SAFE_OPEN(FNAME, O_RDONLY, NULL);
+
+	for (i = 0; i < ARRAY_SIZE(tc); i++)
+		if (!tc[i].key)
+			tc[i].key = tst_get_bad_addr(cleanup);
+}
+
+static struct tst_test test = {
+	.setup = setup,
+	.test = verify_fsetxattr,
+	.cleanup = cleanup,
+	.tcnt = ARRAY_SIZE(tc),
+	.mntpoint = MNTPOINT,
+	.mount_device = 1,
+	.all_filesystems = 1,
+	.needs_tmpdir = 1,
+	.needs_root = 1,
+};
+
+#else /* HAVE_SYS_XATTR_H */
+TST_TEST_TCONF("<sys/xattr.h> does not exist");
+#endif
diff --git a/testcases/kernel/syscalls/fsetxattr/fsetxattr02.c b/testcases/kernel/syscalls/fsetxattr/fsetxattr02.c
new file mode 100644
index 000000000..a04dc67f9
--- /dev/null
+++ b/testcases/kernel/syscalls/fsetxattr/fsetxattr02.c
@@ -0,0 +1,234 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * Copyright (c) 2018 Linaro Limited. All rights reserved.
+ * Author: Rafael David Tinoco <rafael.tinoco@linaro.org>
+ */
+
+/*
+ * In the user.* namespace, only regular files and directories can
+ * have extended attributes. Otherwise fsetxattr(2) will return -1
+ * and set errno to EPERM.
+ *
+ * There are 7 test cases:
+ * 1. Set attribute to a regular file, fsetxattr(2) should succeed
+ * 2. Set attribute to a directory, fsetxattr(2) should succeed
+ * 3. Set attribute to a symlink which points to the regular file,
+ *    fsetxattr(2) should return -1 and set errno to EEXIST
+ * 4. Set attribute to a FIFO, fsetxattr(2) should return -1 and set
+ *    errno to EPERM
+ * 5. Set attribute to a char special file, fsetxattr(2) should
+ *    return -1 and set errno to EPERM
+ * 6. Set attribute to a block special file, fsetxattr(2) should
+ *    return -1 and set errno to EPERM
+ * 7. Set attribute to a UNIX domain socket, fsetxattr(2) should
+ *    return -1 and set errno to EPERM
+ */
+
+#include "config.h"
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/sysmacros.h>
+#include <sys/wait.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <signal.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/socket.h>
+#include <sys/un.h>
+#ifdef HAVE_SYS_XATTR_H
+# include <sys/xattr.h>
+#endif
+#include "tst_test.h"
+
+#ifdef HAVE_SYS_XATTR_H
+#define XATTR_TEST_KEY "user.testkey"
+#define XATTR_TEST_VALUE "this is a test value"
+#define XATTR_TEST_VALUE_SIZE 20
+
+#define OFFSET    11
+#define FILENAME "fsetxattr02testfile"
+#define DIRNAME  "fsetxattr02testdir"
+#define SYMLINK  "fsetxattr02symlink"
+#define FIFO     "fsetxattr02fifo"
+#define CHR      "fsetxattr02chr"
+#define BLK      "fsetxattr02blk"
+#define SOCK     "fsetxattr02sock"
+
+struct test_case {
+	char *fname;
+	int fd;
+	int fflags;
+	char *key;
+	char *value;
+	size_t size;
+	int flags;
+	int exp_err;
+	int issocket;
+};
+static struct test_case tc[] = {
+	{			/* case 00, set attr to reg */
+	 .fname = FILENAME,
+	 .fflags = O_RDONLY,
+	 .key = XATTR_TEST_KEY,
+	 .value = XATTR_TEST_VALUE,
+	 .size = XATTR_TEST_VALUE_SIZE,
+	 .flags = XATTR_CREATE,
+	 .exp_err = 0,
+	 },
+	{			/* case 01, set attr to dir */
+	 .fname = DIRNAME,
+	 .fflags = O_RDONLY,
+	 .key = XATTR_TEST_KEY,
+	 .value = XATTR_TEST_VALUE,
+	 .size = XATTR_TEST_VALUE_SIZE,
+	 .flags = XATTR_CREATE,
+	 .exp_err = 0,
+	 },
+	{			/* case 02, set attr to symlink */
+	 .fname = SYMLINK,
+	 .fflags = O_RDONLY,
+	 .key = XATTR_TEST_KEY,
+	 .value = XATTR_TEST_VALUE,
+	 .size = XATTR_TEST_VALUE_SIZE,
+	 .flags = XATTR_CREATE,
+	 .exp_err = EEXIST,
+	 },
+	{			/* case 03, set attr to fifo */
+	 .fname = FIFO,
+	 .fflags = (O_RDONLY | O_NONBLOCK),
+	 .key = XATTR_TEST_KEY,
+	 .value = XATTR_TEST_VALUE,
+	 .size = XATTR_TEST_VALUE_SIZE,
+	 .flags = XATTR_CREATE,
+	 .exp_err = EPERM,
+	 },
+	{			/* case 04, set attr to character special */
+	 .fname = CHR,
+	 .fflags = O_RDONLY,
+	 .key = XATTR_TEST_KEY,
+	 .value = XATTR_TEST_VALUE,
+	 .size = XATTR_TEST_VALUE_SIZE,
+	 .flags = XATTR_CREATE,
+	 .exp_err = EPERM,
+	 },
+	{			/* case 05, set attr to block special */
+	 .fname = BLK,
+	 .fflags = O_RDONLY,
+	 .key = XATTR_TEST_KEY,
+	 .value = XATTR_TEST_VALUE,
+	 .size = XATTR_TEST_VALUE_SIZE,
+	 .flags = XATTR_CREATE,
+	 .exp_err = EPERM,
+	 },
+	{			/* case 06, set attr to socket */
+	 .fname = SOCK,
+	 .fflags = O_RDONLY,
+	 .key = XATTR_TEST_KEY,
+	 .value = XATTR_TEST_VALUE,
+	 .size = XATTR_TEST_VALUE_SIZE,
+	 .flags = XATTR_CREATE,
+	 .exp_err = EPERM,
+	 .issocket = 1,
+	 },
+};
+
+static void verify_fsetxattr(unsigned int i)
+{
+	TEST(fsetxattr(tc[i].fd, tc[i].key, tc[i].value, tc[i].size,
+			tc[i].flags));
+
+	if (TST_RET == -1 && TST_ERR == EOPNOTSUPP)
+		tst_brk(TCONF, "fsetxattr() not supported");
+
+	if (!tc[i].exp_err) {
+		if (TST_RET) {
+			tst_res(TFAIL | TTERRNO,
+				"fsetxattr() on %s failed with %li",
+				tc[i].fname + OFFSET, TST_RET);
+			return;
+		}
+
+		tst_res(TPASS, "fsetxattr() on %s passed",
+				tc[i].fname + OFFSET);
+		return;
+	}
+
+	if (TST_RET == 0) {
+		tst_res(TFAIL, "fsetxattr() on %s passed unexpectedly",
+				tc[i].fname + OFFSET);
+		return;
+	}
+
+	if (tc[i].exp_err != TST_ERR) {
+		tst_res(TFAIL | TTERRNO,
+				"fsetxattr() on %s should have failed with %s",
+				tc[i].fname + OFFSET,
+				tst_strerrno(tc[i].exp_err));
+		return;
+	}
+
+	tst_res(TPASS | TTERRNO, "fsetxattr() on %s failed",
+			tc[i].fname + OFFSET);
+}
+
+static void setup(void)
+{
+	size_t i = 0;
+	struct sockaddr_un sun;
+
+	dev_t dev = makedev(1, 3);
+
+	SAFE_TOUCH(FILENAME, 0644, NULL);
+	SAFE_MKDIR(DIRNAME, 0644);
+	SAFE_SYMLINK(FILENAME, SYMLINK);
+	SAFE_MKNOD(FIFO, S_IFIFO | 0777, 0);
+	SAFE_MKNOD(CHR, S_IFCHR | 0777, dev);
+	SAFE_MKNOD(BLK, S_IFBLK | 0777, dev);
+
+	for (i = 0; i < ARRAY_SIZE(tc); i++) {
+
+		if (!tc[i].issocket) {
+			tc[i].fd = SAFE_OPEN(tc[i].fname, tc[i].fflags, NULL);
+			continue;
+		}
+
+		/* differently than setxattr calls, when dealing with
+		 * sockets, mknod() isn't enough to test fsetxattr().
+		 * we have to get a real unix socket in order for open()
+		 * to get a file desc.
+		 */
+		tc[i].fd = SAFE_SOCKET(AF_UNIX, SOCK_STREAM, 0);
+
+		memset(&sun, 0, sizeof(struct sockaddr_un));
+		sun.sun_family = AF_UNIX;
+		strncpy(sun.sun_path, tc[i].fname, sizeof(sun.sun_path) - 1);
+
+		SAFE_BIND(tc[i].fd, (const struct sockaddr *) &sun,
+				sizeof(struct sockaddr_un));
+	}
+}
+
+static void cleanup(void)
+{
+	size_t i = 0;
+
+	for (i = 0; i < ARRAY_SIZE(tc); i++)
+		if (tc[i].fd > 0)
+			SAFE_CLOSE(tc[i].fd);
+}
+
+static struct tst_test test = {
+	.setup = setup,
+	.test = verify_fsetxattr,
+	.cleanup = cleanup,
+	.tcnt = ARRAY_SIZE(tc),
+	.needs_tmpdir = 1,
+	.needs_root = 1,
+};
+
+#else /* HAVE_SYS_XATTR_H */
+TST_TEST_TCONF("<sys/xattr.h> does not exist");
+#endif
-- 
2.18.0

