PRINTKs

inaddy@bug3765:~$ sudo mkfs.ext4 /dev/zram0 
mke2fs 1.44.4 (18-Aug-2018)

Filesystem too small for a journal
Creating filesystem with 256 4k blocks and 128 inodes

Allocating group tables: done                            
Writing inode tables: done                            
Writing superblocks and filesystem accounting information:

[   68.680544] mm/zsmalloc.c:1517:handle:3928489984			- 0xEA280000			HANDLE = slab zs_pool->handle_cachep (zs_handle)
[   68.682853] mm/zsmalloc.c:1518:size:89 				- 0x59	(89)			SIZE (size argument, space asked for zsmalloc)

[   68.684672] mm/zsmalloc.c:1524:size:93				- 0x5D	(93)			SIZE (size + zs_handle size (4))
[   68.686987] mm/zsmalloc.c:1525:size_class->size:96 			- 0x60 	(96)			SIZE_CLASS->SIZE (pool->size_class[index for size])
[   68.689390] mm/zsmalloc.c:1526:size_class->objs_per_zspage:128 	- 0x80 	(128)			SIZE_CLASS->OBJS_PER_ZSPAGE
[   68.692280] mm/zsmalloc.c:1527:size_class->pages_per_zspage:3 	- 0x3 				SIZE_CLASS->PAGES_PER_ZSPAGE

[   68.695274] mm/zsmalloc.c:1549:zspage->fullness:0 			- 0x0 				ZSPAGE->FULLNESS (still zeroed)
[   68.697795] mm/zsmalloc.c:1550:zspage->class:0 			- 0x0 				ZSPAGE->CLASS (still zeroed)
[   68.699995] mm/zsmalloc.c:1551:zspage->isolated:0 			- 0x0 				ZSPAGE->ISOLATED (still zeroed)
[   68.702352] mm/zsmalloc.c:1552:zspage->magic:88			- 0x58 (88)			ZSPAGE->MAGIC (calculated on alloc_zspage())
[   68.704588] mm/zsmalloc.c:1553:zspage->inuse:0			- 0x0 				ZSPAGE->INUSE (still zeroed)
[   68.707191] mm/zsmalloc.c:1554:zspage->freeobj:0			- 0x0 				ZSPAGE->FREEOBJ (still zeroed)

	obj = obj_malloc(class, zspage, handle);

[   68.709468] mm/zsmalloc.c:1440:zspage ptr:3949846528			- 0xEB6DE000			ZSPAGE PTR (given arg, ptr)
[   68.711933] mm/zsmalloc.c:1441:handle:3928489984 			- 0xEA280000			HANDLE (given arg, handle id)

	handle |= OBJ_ALLOCATED_TAG;
	obj = get_freeobj(zspage);

[   68.714218] mm/zsmalloc.c:1446:handle:3928489985			- 0xEA280001		 	HANDLE (handle | OBJ_ALLOCATED_TAG == 1)
[   68.716841] mm/zsmalloc.c:1447:obj:0					- 0x0 	 			OBJ (zspage->freeobj)

	offset = obj * class->size; 					- 0x0 * 0x93 = 0x0
	nr_page = offset >> PAGE_SHIFT; 				- 0 >> 12 = 0
	m_offset = offset & ~PAGE_MASK; 				- 0 & ~(((1UL) << 12)-1) = 0
	m_page = get_first_page(zspage); 				- struct zspage->first-page 

[   68.718649] mm/zsmalloc.c:1454:offset:0				- 0x0 				OFFSET
[   68.720525] mm/zsmalloc.c:1455:nr_page:0				- 0x0 				NR_PAGE
[   68.722506] mm/zsmalloc.c:1456:m_offset:0				- 0x0 				M_OFFSET
[   68.724477] mm/zsmalloc.c:1457:m_page:4025872960			- 0xEFF5F240			M_PAGE (alloc_page() from alloc_zspage->create_page-chain())

	for (i = 0; i < nr_page; i++)					- nr_page == 0
		m_page = get_next_page(m_page);

[   68.727181] mm/zsmalloc.c:1462:m_page:4025872960			- 0xEFF5F240			M_PAGE (still first_page, no loop)

	vaddr = kmap_atomic(m_page);

[   68.729483] mm/zsmalloc.c:1466:vaddr ptr:4293713920			- 0xFFECE000			VADDR (page address from kmap_atomic())

	link = (struct link_free *)vaddr + m_offset / sizeof(*link);

[   68.731934] mm/zsmalloc.c:1470:link ptr:4293713920			- 0xFFECE000			LINK == VADDR (since m_offset is 0)

	obj = location_to_obj(m_page, obj);								M_PAGE == 4025872960 == 0xEFF5F240 (from alloc_page()...)

	[   68.734401] mm/zsmalloc.c:876:obj_idx:0			- 0x0 				OBJ_IDX (arg given = zspage->freeobj == 0)
	[   68.736619] mm/zsmalloc.c:877:obj:0				- 0x0 				OBJ (arg declared)

		obj = page_to_pfn(page) << OBJ_INDEX_BITS;		- PAGE_TO_PFN << 7 
		       (BITS_PER_LONG - _PFN_BITS - OBJ_TAG_BITS)         				PAGE_TO_PFN == 0x1BB3120
                            32 - 24 - 1 = 7

	[   68.738434] mm/zsmalloc.c:880:obj:3717763072			- 0xDD989000			OBJ == 0xDD989000

		obj |= obj_idx & OBJ_INDEX_MASK;

	[   68.740585] mm/zsmalloc.c:882:obj:3717763072			- 0xDD989000			OBJ == 0xDD989000

		obj <<= OBJ_TAG_BITS;

	[   68.742806] mm/zsmalloc.c:884:obj:3140558848			- 0xBB312000			OBJ == 3140558848 == 0xBB312000 (RETURNED)


[   68.745096] mm/zsmalloc.c:1486:m_page:4025872960			- 0xEFF5F240 			M_PAGE (alloc_page() from alloc_zspage->... zspage->first_page)
[   68.747458] mm/zsmalloc.c:1487:obj:3140558848			- 0xBB312000			OBJ == 3140558848 == 0xBB312000 (RETURNED FROM location_to_obj())

	return obj;

[   68.749686] mm/zsmalloc.c:1558:obj:3140558848			- 0xBB312000			OBJ (RETURNED FROM OBJ_MALLOC)

	newfg = get_fullness_group(class, zspage);			- ZS_ALMOST_EMPTY

[   68.751818] mm/zsmalloc.c:1560:newfg:1 				- 0x1 				NEWFG

	insert_zspage(class, zspage, newfg);
	set_zspage_mapping(zspage, class->index, newfg);
	
	record_obj(handle, obj);					- HANDLE == 0xEA280000
		== WRITE_ONCE(*(unsigned long *)handle, obj);		- OBJ == 0xBB312000


[   68.753709] mm/zsmalloc.c:1564:handle:3928489984			- 0xEA280000			HANDLE
[   68.756210] mm/zsmalloc.c:1565:obj:3140558848			- 0xBB312000  			OBJ
[   68.758429] mm/zsmalloc.c:1574:handle:3928489984 			- 0xEA280000			HANDLE

[   68.760713] drivers/block/zram/zram_drv.c:1162:handle:3928489984	- 0xEA280000			HANDLE (RETURNED FROM zs_malloc() to __zram_bvec_write())
[   68.763620] drivers/block/zram/zram_drv.c:1167:alloced_pages:3 	- 0x3 				ALLOCED_PAGES

	__zram_bvec_write() calls zs_map_object():

[   68.766766] mm/zsmalloc.c:1335:handle:3928489984			- 0xEA280000			HANDLE
[   68.769063] mm/zsmalloc.c:1338:obj:3140558849 			- 0xBB312001 			OBJ

[   68.771208] Unable to handle kernel NULL pointer dereference at virtual address 00000000
[   68.775256] pgd = (ptrval)




